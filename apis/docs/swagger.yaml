definitions:
  apis.Admin:
    properties:
      avatar:
        type: integer
      created:
        type: object
      email:
        type: string
      id:
        type: string
      updated:
        type: object
    type: object
  apis.AdminCreateForm:
    properties:
      avatar:
        type: integer
      email:
        type: string
      id:
        type: string
      password:
        type: string
      passwordConfirm:
        type: string
    type: object
  apis.AdminLogin:
    properties:
      identity:
        type: string
      password:
        type: string
    type: object
  apis.AdminPasswordResetConfirm:
    properties:
      password:
        type: string
      passwordConfirm:
        type: string
      token:
        type: string
    type: object
  apis.AdminPasswordResetRequest:
    properties:
      email:
        type: string
    type: object
  apis.AdminUpdateForm:
    properties:
      avatar:
        type: integer
      email:
        type: string
      id:
        type: string
      password:
        type: string
      passwordConfirm:
        type: string
    type: object
  apis.AuthProviderConfig:
    properties:
      authUrl:
        type: string
      clientId:
        type: string
      clientSecret:
        type: string
      enabled:
        type: boolean
      tokenUrl:
        type: string
      userApiUrl:
        type: string
    type: object
  apis.BackupCreateRequest:
    properties:
      name:
        type: string
    type: object
  apis.BackupFileInfo:
    properties:
      key:
        type: string
      modified:
        type: object
      size:
        type: integer
    type: object
  apis.BackupsConfig:
    properties:
      cron:
        description: |-
          Cron is a cron expression to schedule auto backups, eg. "* * * * *".

          Leave it empty to disable the auto backups functionality.
        type: string
      cronMaxKeep:
        description: |-
          CronMaxKeep is the the max number of cron generated backups to
          keep before removing older entries.

          This field works only when the cron config has valid cron expression.
        type: integer
      s3:
        allOf:
        - $ref: '#/definitions/apis.S3Config'
        description: S3 is an optional S3 storage config specifying where to store
          the app backups.
    type: object
  apis.Collection:
    properties:
      createRule:
        type: string
      created:
        type: object
      deleteRule:
        type: string
      id:
        type: string
      indexes:
        items:
          type: string
        type: array
      listRule:
        description: rules
        type: string
      name:
        type: string
      options:
        additionalProperties: {}
        type: object
      schema:
        type: object
      system:
        type: boolean
      type:
        type: string
      updateRule:
        type: string
      updated:
        type: object
      viewRule:
        type: string
    type: object
  apis.CollectionCreateRequest:
    properties:
      createRule:
        type: string
      deleteRule:
        type: string
      id:
        type: string
      indexes:
        items:
          type: string
        type: array
      listRule:
        type: string
      name:
        type: string
      options:
        additionalProperties: {}
        type: object
      schema:
        type: object
      system:
        type: boolean
      type:
        type: string
      updateRule:
        type: string
      viewRule:
        type: string
    type: object
  apis.CollectionsImportRequest:
    properties:
      collections:
        items:
          $ref: '#/definitions/apis.Collection'
        type: array
      deleteMissing:
        type: boolean
    type: object
  apis.CreateRecordRequest:
    properties:
      email:
        type: string
      emailVisibility:
        type: boolean
      id:
        description: base model fields
        type: string
      oldPassword:
        type: string
      password:
        type: string
      passwordConfirm:
        type: string
      username:
        description: |-
          auth collection fields
          ---
        type: string
      verified:
        type: boolean
    type: object
  apis.EmailAuthConfig:
    properties:
      enabled:
        type: boolean
      exceptDomains:
        items:
          type: string
        type: array
      minPasswordLength:
        type: integer
      onlyDomains:
        items:
          type: string
        type: array
    type: object
  apis.EmailTemplate:
    properties:
      actionUrl:
        type: string
      body:
        type: string
      subject:
        type: string
    type: object
  apis.ExternalAuthResponse:
    properties:
      collectionId:
        type: string
      created:
        type: object
      id:
        type: string
      provider:
        type: string
      providerId:
        type: string
      recordId:
        type: string
      updated:
        type: object
    type: object
  apis.LogsConfig:
    properties:
      maxDays:
        type: integer
    type: object
  apis.RealtimeSubscribeForm:
    properties:
      clientId:
        type: string
      subscriptions:
        items:
          type: string
        type: array
    type: object
  apis.S3Config:
    properties:
      accessKey:
        type: string
      bucket:
        type: string
      enabled:
        type: boolean
      endpoint:
        type: string
      forcePathStyle:
        type: boolean
      region:
        type: string
      secret:
        type: string
    type: object
  apis.SearchResult:
    properties:
      items: {}
      page:
        type: integer
      perPage:
        type: integer
      totalItems:
        type: integer
      totalPages:
        type: integer
    type: object
  apis.Settings:
    properties:
      adminAuthToken:
        $ref: '#/definitions/apis.TokenConfig'
      adminFileToken:
        $ref: '#/definitions/apis.TokenConfig'
      adminPasswordResetToken:
        $ref: '#/definitions/apis.TokenConfig'
      appleAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      backups:
        $ref: '#/definitions/apis.BackupsConfig'
      discordAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      emailAuth:
        allOf:
        - $ref: '#/definitions/apis.EmailAuthConfig'
        description: 'Deprecated: Will be removed in v0.9+'
      facebookAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      giteaAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      giteeAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      githubAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      gitlabAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      googleAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      kakaoAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      livechatAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      logs:
        $ref: '#/definitions/apis.LogsConfig'
      meta:
        properties:
          appName:
            type: string
          appUrl:
            type: string
          confirmEmailChangeTemplate:
            $ref: '#/definitions/apis.EmailTemplate'
          hideControls:
            type: boolean
          resetPasswordTemplate:
            $ref: '#/definitions/apis.EmailTemplate'
          senderAddress:
            type: string
          senderName:
            type: string
          verificationTemplate:
            $ref: '#/definitions/apis.EmailTemplate'
        type: object
      microsoftAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      oidc2Auth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      oidc3Auth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      oidcAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      recordAuthToken:
        $ref: '#/definitions/apis.TokenConfig'
      recordEmailChangeToken:
        $ref: '#/definitions/apis.TokenConfig'
      recordFileToken:
        $ref: '#/definitions/apis.TokenConfig'
      recordPasswordResetToken:
        $ref: '#/definitions/apis.TokenConfig'
      recordVerificationToken:
        $ref: '#/definitions/apis.TokenConfig'
      s3:
        $ref: '#/definitions/apis.S3Config'
      smtp:
        $ref: '#/definitions/apis.SmtpConfig'
      spotifyAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      stravaAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      twitchAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      twitterAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
    type: object
  apis.SmtpConfig:
    properties:
      authMethod:
        description: SMTP AUTH - PLAIN (default) or LOGIN
        type: string
      enabled:
        type: boolean
      host:
        type: string
      password:
        type: string
      port:
        type: integer
      tls:
        description: |-
          Whether to enforce TLS encryption for the mail server connection.

          When set to false StartTLS command is send, leaving the server
          to decide whether to upgrade the connection or not.
        type: boolean
      username:
        type: string
    type: object
  apis.TestEmailSettingsRequest:
    properties:
      email:
        type: string
      template:
        type: string
    type: object
  apis.TestS3SettingsRequest:
    properties:
      filesystem:
        description: The name of the filesystem - storage or backups
        type: string
    type: object
  apis.TokenConfig:
    properties:
      duration:
        type: integer
      secret:
        type: string
    type: object
  apis.UpdateSettingsRequest:
    properties:
      adminAuthToken:
        $ref: '#/definitions/apis.TokenConfig'
      adminFileToken:
        $ref: '#/definitions/apis.TokenConfig'
      adminPasswordResetToken:
        $ref: '#/definitions/apis.TokenConfig'
      appleAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      backups:
        $ref: '#/definitions/apis.BackupsConfig'
      discordAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      emailAuth:
        allOf:
        - $ref: '#/definitions/apis.EmailAuthConfig'
        description: 'Deprecated: Will be removed in v0.9+'
      facebookAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      giteaAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      giteeAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      githubAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      gitlabAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      googleAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      kakaoAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      livechatAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      logs:
        $ref: '#/definitions/apis.LogsConfig'
      meta:
        properties:
          appName:
            type: string
          appUrl:
            type: string
          confirmEmailChangeTemplate:
            $ref: '#/definitions/apis.EmailTemplate'
          hideControls:
            type: boolean
          resetPasswordTemplate:
            $ref: '#/definitions/apis.EmailTemplate'
          senderAddress:
            type: string
          senderName:
            type: string
          verificationTemplate:
            $ref: '#/definitions/apis.EmailTemplate'
        type: object
      microsoftAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      oidc2Auth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      oidc3Auth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      oidcAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      recordAuthToken:
        $ref: '#/definitions/apis.TokenConfig'
      recordEmailChangeToken:
        $ref: '#/definitions/apis.TokenConfig'
      recordFileToken:
        $ref: '#/definitions/apis.TokenConfig'
      recordPasswordResetToken:
        $ref: '#/definitions/apis.TokenConfig'
      recordVerificationToken:
        $ref: '#/definitions/apis.TokenConfig'
      s3:
        $ref: '#/definitions/apis.S3Config'
      smtp:
        $ref: '#/definitions/apis.SmtpConfig'
      spotifyAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      stravaAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      twitchAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
      twitterAuth:
        $ref: '#/definitions/apis.AuthProviderConfig'
    type: object
info:
  contact: {}
paths:
  /admins:
    get:
      consumes:
      - application/json
      description: Возвращает список администраторов с возможностью поиска и сортировки
      parameters:
      - description: Идентификатор администратора
        in: query
        name: id
        type: string
      - description: Дата создания администратора
        in: query
        name: created
        type: string
      - description: Дата обновления администратора
        in: query
        name: updated
        type: string
      - description: Имя администратора
        in: query
        name: name
        type: string
      - description: Email администратора
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apis.Admin'
            type: array
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      summary: Получение списка администраторов
      tags:
      - Admin
    post:
      consumes:
      - application/json
      description: Создает нового администратора
      parameters:
      - description: Данные для создания администратора
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/apis.AdminCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.Admin'
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      summary: Создание администратора
      tags:
      - Admin
  /admins/{id}:
    delete:
      description: Удаляет указанного администратора по его идентификатору
      parameters:
      - description: Идентификатор администратора
        in: path
        name: id
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      summary: Удаление администратора
      tags:
      - Admin
    get:
      consumes:
      - application/json
      description: Возвращает информацию об указанном администраторе по его идентификатору
      parameters:
      - description: Идентификатор администратора
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.Admin'
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      summary: Просмотр администратора
      tags:
      - Admin
    patch:
      consumes:
      - application/json
      description: Обновляет информацию об указанном администраторе по его идентификатору
      parameters:
      - description: Идентификатор администратора
        in: path
        name: id
        required: true
        type: string
      - description: Данные для обновления администратора
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/apis.AdminUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.Admin'
        "400":
          description: Not found
          schema:
            type: string
      summary: Обновление администратора
      tags:
      - Admin
  /admins/auth-refresh:
    post:
      description: Refreshes the admin authentication.
      parameters:
      - description: Access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            type: string
        "404":
          description: Missing auth admin context
          schema:
            type: string
      summary: Admin Authentication Refresh
      tags:
      - Admin
  /admins/auth-with-password:
    post:
      consumes:
      - application/json
      description: Выполняет аутентификацию администратора с использованием пароля
      parameters:
      - description: Данные аутентификации администратора
        in: body
        name: adminLogin
        required: true
        schema:
          $ref: '#/definitions/apis.AdminLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            type: string
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      summary: Аутентификация администратора с использованием пароля
      tags:
      - Admin
  /admins/confirm-password-reset:
    post:
      consumes:
      - application/json
      description: Подтверждает сброс пароля администратора
      parameters:
      - description: Данные подтверждения сброса пароля администратора
        in: body
        name: passwordResetConfirm
        required: true
        schema:
          $ref: '#/definitions/apis.AdminPasswordResetConfirm'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      summary: Подтверждение сброса пароля администратора
      tags:
      - Admin
  /admins/request-password-reset:
    post:
      consumes:
      - application/json
      description: Отправляет запрос на сброс пароля администратора
      parameters:
      - description: Данные запроса на сброс пароля администратора
        in: body
        name: passwordResetRequest
        required: true
        schema:
          $ref: '#/definitions/apis.AdminPasswordResetRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      summary: Запрос на сброс пароля администратора
      tags:
      - Admin
  /backups:
    get:
      description: Возвращает список доступных резервных копий
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/apis.BackupFileInfo'
            type: array
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Получение списка резервных копий
      tags:
      - Backups
    post:
      consumes:
      - application/json
      description: Создает новую резервную копию
      parameters:
      - description: Данные для создания резервной копии
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apis.BackupCreateRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Создание резервной копии
      tags:
      - Backups
  /backups/{key}:
    delete:
      description: Удаляет резервную копию по указанному ключу
      parameters:
      - description: Ключ резервной копии
        in: path
        name: key
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Удаление резервной копии
      tags:
      - Backups
    get:
      description: Загружает резервную копию по указанному ключу
      parameters:
      - description: Ключ резервной копии
        in: path
        name: key
        required: true
        type: string
      - description: Токен доступа
        in: query
        name: token
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Not exists.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Загрузка резервной копии
      tags:
      - Backups
  /backups/{key}/restore:
    post:
      description: Запускает процесс восстановления резервной копии по указанному
        ключу
      parameters:
      - description: Ключ резервной копии
        in: path
        name: key
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Восстановление резервной копии
      tags:
      - Backups
  /collections:
    get:
      description: Возвращает список коллекций с возможностью фильтрации и сортировки
      parameters:
      - description: ID коллекции
        in: query
        name: id
        type: string
      - description: Дата создания коллекции в формате ISO8601
        in: query
        name: created
        type: string
      - description: Дата обновления коллекции в формате ISO8601
        in: query
        name: updated
        type: string
      - description: Название коллекции
        in: query
        name: name
        type: string
      - description: Системная коллекция
        in: query
        name: system
        type: boolean
      - description: Тип коллекции
        in: query
        name: type
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.SearchResult'
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Получить список коллекций
      tags:
      - Collections
    post:
      consumes:
      - application/json
      description: Создает новую коллекцию
      parameters:
      - description: Данные для создания коллекции
        in: body
        name: collection
        required: true
        schema:
          $ref: '#/definitions/apis.CollectionCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.Collection'
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Создать коллекцию
      tags:
      - Collections
  /collections/{collection}:
    delete:
      description: Удаляет коллекцию по ее имени или ID
      parameters:
      - description: Имя или ID коллекции
        in: path
        name: collection
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Удалить коллекцию
      tags:
      - Collections
    get:
      consumes:
      - application/json
      description: Возвращает информацию о коллекции по ее имени или ID
      parameters:
      - description: Имя или ID коллекции
        in: path
        name: collection
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.Collection'
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Просмотреть коллекцию
      tags:
      - Collections
    patch:
      consumes:
      - application/json
      description: Обновляет информацию о коллекции по ее имени или ID
      parameters:
      - description: Имя или ID коллекции
        in: path
        name: collection
        required: true
        type: string
      - description: Данные для обновления коллекции
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apis.CollectionCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.Collection'
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Обновить коллекцию
      tags:
      - Collections
  /collections/{collection}/auth-methods:
    get:
      description: Возвращает доступные методы аутентификации для указанной коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      responses:
        "200":
          description: методы аутентификации успешно получены
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Получить методы аутентификации
      tags:
      - Record Auth
  /collections/{collection}/auth-refresh:
    post:
      description: Обновляет данные аутентификации для указанной записи
      responses:
        "200":
          description: данные аутентификации успешно обновленны
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Обновить данные аутентификации
      tags:
      - Record Auth
  /collections/{collection}/auth-with-oauth2:
    post:
      consumes:
      - application/json
      description: Выполняет аутентификацию с использованием протокола OAuth2 для
        указанной коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: аутентификация с использованием OAuth2 успешна
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Аутентификация с использованием OAuth2
      tags:
      - Record Auth
  /collections/{collection}/auth-with-password:
    post:
      consumes:
      - application/json
      description: Выполняет аутентификацию с использованием пароля для указанной
        коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Аутентификация с использованием пароля успешна
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Аутентификация с использованием пароля
      tags:
      - Record Auth
  /collections/{collection}/confirm-email-change:
    post:
      consumes:
      - application/json
      description: Подтверждает изменение электронной почты для указанной коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Подтверждение изменения электронной почты успешно
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Подтверждение изменения электронной почты
      tags:
      - Record Auth
  /collections/{collection}/confirm-password-reset:
    post:
      consumes:
      - application/json
      description: Подтверждает сброс пароля для указанной коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Подтверждение сброса пароля успешно
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Подтверждение сброса пароля
      tags:
      - Record Auth
  /collections/{collection}/confirm-verification:
    post:
      consumes:
      - application/json
      description: Подтверждает верификацию для указанной коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Подтверждение верификации успешно
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Подтверждение верификации
      tags:
      - Record Auth
  /collections/{collection}/records:
    get:
      consumes:
      - application/json
      description: Возвращает список записей из указанной коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Получение списка записей успешно
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Получение списка записей
      tags:
      - Record
    post:
      consumes:
      - application/json
      description: Создает новую запись в указанной коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      - description: Данные для создания записи
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apis.CreateRecordRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Создание записи успешно
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Создание записи
      tags:
      - Record
  /collections/{collection}/records/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет указанную запись из указанной коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      - description: Идентификатор записи
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Удаление записи успешно
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Удаление записи
      tags:
      - Record
    get:
      consumes:
      - application/json
      description: Возвращает информацию о указанной записи из указанной коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      - description: Идентификатор записи
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Просмотр записи успешен
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Просмотр записи
      tags:
      - Record
    patch:
      consumes:
      - application/json
      description: Обновляет информацию о указанной записи в указанной коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      - description: Идентификатор записи
        in: path
        name: id
        required: true
        type: string
      - description: Данные для обновления записи
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apis.CreateRecordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Обновление записи успешно
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Обновление записи
      tags:
      - Record
  /collections/{collection}/records/{id}/external-auths:
    get:
      consumes:
      - application/json
      description: Возвращает список внешних аутентификаций для указанной записи в
        указанной коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      - description: Идентификатор записи
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/apis.ExternalAuthResponse'
              type: array
            type: array
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Получение внешних аутентификаций записи
      tags:
      - Record Auth
  /collections/{collection}/records/{id}/external-auths/{provider}:
    delete:
      consumes:
      - application/json
      description: Отвязывает указанную внешнюю аутентификацию от указанной записи
        в указанной коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      - description: Идентификатор записи
        in: path
        name: id
        required: true
        type: string
      - description: Провайдер внешней аутентификации
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Отвязывание внешней аутентификации успешно
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Отвязывание внешней аутентификации
      tags:
      - Record Auth
  /collections/{collection}/request-email-change:
    post:
      consumes:
      - application/json
      description: Отправляет запрос на изменение электронной почты для указанной
        коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Запрос изменения электронной почты успешен
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Запрос изменения электронной почты
      tags:
      - Record Auth
  /collections/{collection}/request-password-reset:
    post:
      consumes:
      - application/json
      description: Отправляет запрос на сброс пароля для указанной коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Запрос сброса пароля успешнен
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Запрос сброса пароля
      tags:
      - Record Auth
  /collections/{collection}/request-verification:
    post:
      consumes:
      - application/json
      description: Отправляет запрос на верификацию для указанной коллекции
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Запрос верификации успешен
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - Auth: []
      summary: Запрос верификации
      tags:
      - Record Auth
  /collections/import:
    post:
      consumes:
      - application/json
      description: Импортирует коллекции из переданных данных
      parameters:
      - description: Данные для импорта коллекций
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apis.CollectionsImportRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Импортировать коллекции
      tags:
      - Collections
  /files/{collection}/{recordId}/{filename}:
    get:
      description: Загружает файл
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      - description: Идентификатор записи
        in: path
        name: recordId
        required: true
        type: string
      - description: Имя файла
        in: path
        name: filename
        required: true
        type: string
      - description: Токен доступа к файлу
        in: query
        name: token
        type: string
      - description: Размер эскиза (если применимо)
        in: query
        name: thumb
        type: string
      responses:
        "200":
          description: Файл загружен
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "403":
          description: Not exists.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - AdminAuth: []
      - RecordAuth: []
      summary: Загрузить файл
      tags:
      - Files
    head:
      description: Загружает файл
      parameters:
      - description: Идентификатор коллекции
        in: path
        name: collection
        required: true
        type: string
      - description: Идентификатор записи
        in: path
        name: recordId
        required: true
        type: string
      - description: Имя файла
        in: path
        name: filename
        required: true
        type: string
      - description: Токен доступа к файлу
        in: query
        name: token
        type: string
      - description: Размер эскиза (если применимо)
        in: query
        name: thumb
        type: string
      responses:
        "200":
          description: Файл загружен
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "403":
          description: Not exists.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - AdminAuth: []
      - RecordAuth: []
      summary: Загрузить файл
      tags:
      - Files
  /files/token:
    post:
      description: Генерирует токен для доступа к файлу
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            type: string
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      security:
      - AdminAuth: []
      - RecordAuth: []
      summary: Генерировать токен файла
      tags:
      - Files
  /realtime:
    get:
      description: Устанавливает соединение в реальном времени
      responses:
        "200":
          description: Соединение установлено
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Установить соединение в реальном времени
      tags:
      - Realtime
    post:
      consumes:
      - application/json
      description: Устанавливает подписки для клиента в реальном времени
      parameters:
      - description: Данные подписок
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apis.RealtimeSubscribeForm'
      responses:
        "204":
          description: Подписки успешно установлены
        "400":
          description: Failed to authenticate.
          schema:
            type: string
        "403":
          description: Not exists.
          schema:
            type: string
        "404":
          description: Not found.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Установить подписки в реальном времени
      tags:
      - Realtime
  /settings:
    get:
      consumes:
      - application/json
      description: Возвращает список всех настроек
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/apis.Settings'
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Получение списка настроек
      tags:
      - Settings
    patch:
      consumes:
      - application/json
      description: Обновляет указанные настройки
      parameters:
      - description: Данные для обновления настроек
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apis.UpdateSettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Обновление настроек успешно
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Обновление настроек
      tags:
      - Settings
  /settings/apple/generate-client-secret:
    post:
      consumes:
      - application/json
      description: Генерирует секретный ключ для использования при авторизации Apple
      produces:
      - application/json
      responses:
        "200":
          description: Генерация секретного ключа для авторизации Apple успешно
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Генерация секретного ключа для авторизации Apple
      tags:
      - Settings
  /settings/test/email:
    post:
      consumes:
      - application/json
      description: Проверяет настройки для отправки электронной почты
      parameters:
      - description: Данные для тестирования настроек электронной почты
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apis.TestEmailSettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Тестирование настроек для электронной почты успешно
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Тестирование настроек для электронной почты
      tags:
      - Settings
  /settings/test/s3:
    post:
      consumes:
      - application/json
      description: Проверяет настройки для хранилища S3
      parameters:
      - description: Данные для тестирования настроек S3
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/apis.TestS3SettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Тестирование настроек для хранилища S3 успешно
        "400":
          description: Failed to authenticate.
          schema:
            type: string
      security:
      - AdminAuth: []
      summary: Тестирование настроек для хранилища S3
      tags:
      - Settings
swagger: "2.0"
